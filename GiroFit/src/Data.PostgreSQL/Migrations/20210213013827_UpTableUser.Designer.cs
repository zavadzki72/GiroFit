// <auto-generated />
using System;
using Data.PostgreSQL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.PostgreSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210213013827_UpTableUser")]
    partial class UpTableUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BreakTime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("break_time");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<int>("Frequecy")
                        .HasColumnType("integer")
                        .HasColumnName("frequecy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("sets");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.ExerciseTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<int>("IdExercise")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrain")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.HasIndex("IdExercise");

                    b.HasIndex("IdTrain");

                    b.ToTable("ExerciseTrain");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.Train", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CoverPage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_page");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.ToTable("Train");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.TrainModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<int>("IdModule")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrain")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.HasIndex("IdModule");

                    b.HasIndex("IdTrain");

                    b.ToTable("TrainModule");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<bool>("FlgInativo")
                        .HasColumnType("boolean")
                        .HasColumnName("flg_inativo");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer")
                        .HasColumnName("frequency");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric")
                        .HasColumnName("height");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<int>("Objective")
                        .HasColumnType("integer")
                        .HasColumnName("objective");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("password");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer")
                        .HasColumnName("sexo");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<DateTime>("DtaEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_end");

                    b.Property<DateTime>("DtaStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_start");

                    b.Property<int>("IdExercise")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("IdUserTrain")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.Property<bool>("Watched")
                        .HasColumnType("boolean")
                        .HasColumnName("watched");

                    b.HasKey("Id");

                    b.HasIndex("IdExercise");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserTrain");

                    b.ToTable("UserExercise");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<DateTime>("DtaEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_end");

                    b.Property<DateTime>("DtaStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_start");

                    b.Property<int>("IdModule")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.HasIndex("IdModule");

                    b.HasIndex("IdUser");

                    b.ToTable("UserModule");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_creation");

                    b.Property<int>("IdTrain")
                        .HasColumnType("integer");

                    b.Property<int>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("IdUserModule")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_finished");

                    b.Property<DateTime>("LastAcess")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_acess");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dta_updated");

                    b.HasKey("Id");

                    b.HasIndex("IdTrain");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserModule");

                    b.ToTable("UserTrain");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.ExerciseTrain", b =>
                {
                    b.HasOne("Domain.Models.PostgreSql.Entities.Exercise", "Exercise")
                        .WithMany("ExerciseTrains")
                        .HasForeignKey("IdExercise")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("IdTrain")
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.TrainModule", b =>
                {
                    b.HasOne("Domain.Models.PostgreSql.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("IdModule")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.Train", "Train")
                        .WithMany("TrainModules")
                        .HasForeignKey("IdTrain")
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserExercise", b =>
                {
                    b.HasOne("Domain.Models.PostgreSql.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("IdExercise")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.User", "User")
                        .WithMany("UserExercises")
                        .HasForeignKey("IdUser")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.UserTrain", "UserTrain")
                        .WithMany("UserExercises")
                        .HasForeignKey("IdUserTrain")
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("User");

                    b.Navigation("UserTrain");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserModule", b =>
                {
                    b.HasOne("Domain.Models.PostgreSql.Entities.Module", "Module")
                        .WithMany("UserModules")
                        .HasForeignKey("IdModule")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.User", "User")
                        .WithMany("UserModules")
                        .HasForeignKey("IdUser")
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserTrain", b =>
                {
                    b.HasOne("Domain.Models.PostgreSql.Entities.Train", "Train")
                        .WithMany()
                        .HasForeignKey("IdTrain")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.User", "User")
                        .WithMany("UserTrains")
                        .HasForeignKey("IdUser")
                        .IsRequired();

                    b.HasOne("Domain.Models.PostgreSql.Entities.UserModule", "UserModule")
                        .WithMany("UserTrains")
                        .HasForeignKey("IdUserModule")
                        .IsRequired();

                    b.Navigation("Train");

                    b.Navigation("User");

                    b.Navigation("UserModule");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.Exercise", b =>
                {
                    b.Navigation("ExerciseTrains");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.Module", b =>
                {
                    b.Navigation("UserModules");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.Train", b =>
                {
                    b.Navigation("TrainModules");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.User", b =>
                {
                    b.Navigation("UserExercises");

                    b.Navigation("UserModules");

                    b.Navigation("UserTrains");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserModule", b =>
                {
                    b.Navigation("UserTrains");
                });

            modelBuilder.Entity("Domain.Models.PostgreSql.Entities.UserTrain", b =>
                {
                    b.Navigation("UserExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
